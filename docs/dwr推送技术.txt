DWR推技术在开发中需要注意的ScriptSession问题
1 关于ScriptSession
ScriptSession不会与HttpSession同时创建
当我们访问一个页面的时候，如果是第一次访问，就会创建一个新的HttpSession,之后再访问的时候，就会保持当前的Session,即使是刷新，也能保持当前的HttpSession。
但是，ScriptSession不同，第一次访问，会创建一个ScriptSession,但是，如果你刷新，就会创建一个新的ScriptSession.


2 如何得到ScriptSession
在DWR中，我们可以通过WebContextFactory.get()来取得一个WebContext对象，进而通过WebContext的getScriptSession()取得ScriptSession对象。
但是要注意，在我们自定义的Servlet中，我们也可以通过WebContextFactory.get()来取得一个WebContext,但是这种方法却不能取得ScriptSession对象。因为，此WebContext对象其实
不是通过DWR的上下文环境得到的，所以，就根本没有创建ScriptSession对象。
假设这种方式也能得到ScriptSession的话，那么我们实现“推”也就可以不局限在DWR的上下文环境中了，那么其灵活性就会大很多了。

所以，这就是我们不能在Servlet中实现推的原因。

3 关于刷新就创建一个新的ScriptSession问题
 在我们需要推送的页面中，如果你刷新以下，那么就提交一个Http的request,此时，如果是第一次，那么就会创建一个httpSession对象，同时，请求由DwrServlet来处理后，就会创建一个
 ScriptSession.这个ScriptSession会和你的request请求的URI绑定放在一个由ScriptSessionManager维护的Map里面（这里面其实是一个URI对应的Set,
 在Set里面放置的是URI绑定的所有ScriptSession）。
当你刷新的时候，同样的一个HttpSession,却会创建一个新的ScriptSession,然后绑定到对应的URI上。

4 向所有的页面访问者推送
当我们想向所有的页面访问者推送的时候，我们只需要，取得所有的页面访问者，就可以“推”了。
如何取得所有的页面访问者？可以通过
//        Collection pages = webContext.getScriptSessionsByPage("/SynMap/map/map.jsp");
来取得/SynMap/map/map.jsp的所有访问的ScriptSession
如何推送，
Util util = new Util(pages);
util.addFunctionCall("syningMap",new Double(x),new Double(y),new Integer(zoom));
通过此方法，就可以实现调用客户端的javascript函数，实现对客户端的操作。

5 在上面的推送中产生的问题
上面的方法已经可以实现向所有的访问者推送。但是问题是，在客户端，如果用户刷新一次或多次，那么，Collection里面可能就保存了很多的无用的ScriptSession,所以不仅仅会影响性能问题，
更重要的是，可能就不能实现你想要的功能。

比如，你想取得当前再现的有效用户，那么你就需要知道那些ScriptSession是有效的。

6 如何管理有效的ScriptSession

由于上面的问题，我们就需要自己管理ScriptSession.其实，有效地HttpSession,就是那个和当前的HttpSession匹配的ScriptSession.
所以，我们就可以自己维护一个Map,在这个Map里面，我们定义key就是HttpSession的Id,其值就是ScriptSession对象。
在每一次页面载入的时候，都去注册此ScriptSession,那么就会把新的ScriptSession绑定到httpSession上面了。
// session and scriptSession map
Map sm = g.getSessions();
// hs is HttpSession
// ss is ScriptSession object
sm.put(hs.getId(), ss);

7 如何实现有效推送
通过上面的Map取得所有的有效ScriptSession集合
Collection pages = g.getSessions().values();
然后再推送，就可以了。

8 上面问题的新的解决方案
上面的技术问题和解决方案都是在DWR2.0的环境下遇到的。
昨天看了一下，即将正式发布的DWR3.0的文档，里面对AJAX Reverse技术增加了不少功能。
其中新加了一个象HttpSessionListener的东西，叫ScriptSessionListener
所以，我想，可以通过这个Listener实现上面的功能，也就是说，在监听到一个ScriptSession创建的时候，我们就直接判断，并把此ScriptSession绑定到httpSession上，
就可以了。同样用上面的那个map来管理就可以了。
这个是我的思路，我还没有实践，如果你需要的话，可以自己去试一下。
新版本的DWR开发实现推技术会更加方便，期待吧！！